// Code generated by mockery v2.27.1. DO NOT EDIT.

package loginsvc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLoginServiceServer is an autogenerated mock type for the LoginServiceServer type
type MockLoginServiceServer struct {
	mock.Mock
}

type MockLoginServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginServiceServer) EXPECT() *MockLoginServiceServer_Expecter {
	return &MockLoginServiceServer_Expecter{mock: &_m.Mock}
}

// LoginGuest provides a mock function with given fields: _a0, _a1
func (_m *MockLoginServiceServer) LoginGuest(_a0 context.Context, _a1 *LoginGuestRequest) (*LoginGuestResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoginGuestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *LoginGuestRequest) (*LoginGuestResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *LoginGuestRequest) *LoginGuestResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginGuestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *LoginGuestRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoginServiceServer_LoginGuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginGuest'
type MockLoginServiceServer_LoginGuest_Call struct {
	*mock.Call
}

// LoginGuest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *LoginGuestRequest
func (_e *MockLoginServiceServer_Expecter) LoginGuest(_a0 interface{}, _a1 interface{}) *MockLoginServiceServer_LoginGuest_Call {
	return &MockLoginServiceServer_LoginGuest_Call{Call: _e.mock.On("LoginGuest", _a0, _a1)}
}

func (_c *MockLoginServiceServer_LoginGuest_Call) Run(run func(_a0 context.Context, _a1 *LoginGuestRequest)) *MockLoginServiceServer_LoginGuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*LoginGuestRequest))
	})
	return _c
}

func (_c *MockLoginServiceServer_LoginGuest_Call) Return(_a0 *LoginGuestResponse, _a1 error) *MockLoginServiceServer_LoginGuest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoginServiceServer_LoginGuest_Call) RunAndReturn(run func(context.Context, *LoginGuestRequest) (*LoginGuestResponse, error)) *MockLoginServiceServer_LoginGuest_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: _a0, _a1
func (_m *MockLoginServiceServer) VerifyToken(_a0 context.Context, _a1 *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *VerifyTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *VerifyTokenRequest) *VerifyTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VerifyTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *VerifyTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoginServiceServer_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockLoginServiceServer_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *VerifyTokenRequest
func (_e *MockLoginServiceServer_Expecter) VerifyToken(_a0 interface{}, _a1 interface{}) *MockLoginServiceServer_VerifyToken_Call {
	return &MockLoginServiceServer_VerifyToken_Call{Call: _e.mock.On("VerifyToken", _a0, _a1)}
}

func (_c *MockLoginServiceServer_VerifyToken_Call) Run(run func(_a0 context.Context, _a1 *VerifyTokenRequest)) *MockLoginServiceServer_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*VerifyTokenRequest))
	})
	return _c
}

func (_c *MockLoginServiceServer_VerifyToken_Call) Return(_a0 *VerifyTokenResponse, _a1 error) *MockLoginServiceServer_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoginServiceServer_VerifyToken_Call) RunAndReturn(run func(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)) *MockLoginServiceServer_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedLoginServiceServer provides a mock function with given fields:
func (_m *MockLoginServiceServer) mustEmbedUnimplementedLoginServiceServer() {
	_m.Called()
}

// MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedLoginServiceServer'
type MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedLoginServiceServer is a helper method to define mock.On call
func (_e *MockLoginServiceServer_Expecter) mustEmbedUnimplementedLoginServiceServer() *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call {
	return &MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedLoginServiceServer")}
}

func (_c *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call) Run(run func()) *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call) Return() *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call) RunAndReturn(run func()) *MockLoginServiceServer_mustEmbedUnimplementedLoginServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLoginServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLoginServiceServer creates a new instance of MockLoginServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLoginServiceServer(t mockConstructorTestingTNewMockLoginServiceServer) *MockLoginServiceServer {
	mock := &MockLoginServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
