// Code generated by mockery v2.27.1. DO NOT EDIT.

package gamesvc

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockGameServiceClient is an autogenerated mock type for the GameServiceClient type
type MockGameServiceClient struct {
	mock.Mock
}

type MockGameServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGameServiceClient) EXPECT() *MockGameServiceClient_Expecter {
	return &MockGameServiceClient_Expecter{mock: &_m.Mock}
}

// CreateRoom provides a mock function with given fields: ctx, in, opts
func (_m *MockGameServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateRoomResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateRoomRequest, ...grpc.CallOption) (*CreateRoomResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateRoomRequest, ...grpc.CallOption) *CreateRoomResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateRoomResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateRoomRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGameServiceClient_CreateRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoom'
type MockGameServiceClient_CreateRoom_Call struct {
	*mock.Call
}

// CreateRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreateRoomRequest
//   - opts ...grpc.CallOption
func (_e *MockGameServiceClient_Expecter) CreateRoom(ctx interface{}, in interface{}, opts ...interface{}) *MockGameServiceClient_CreateRoom_Call {
	return &MockGameServiceClient_CreateRoom_Call{Call: _e.mock.On("CreateRoom",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGameServiceClient_CreateRoom_Call) Run(run func(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption)) *MockGameServiceClient_CreateRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateRoomRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGameServiceClient_CreateRoom_Call) Return(_a0 *CreateRoomResponse, _a1 error) *MockGameServiceClient_CreateRoom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGameServiceClient_CreateRoom_Call) RunAndReturn(run func(context.Context, *CreateRoomRequest, ...grpc.CallOption) (*CreateRoomResponse, error)) *MockGameServiceClient_CreateRoom_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: ctx, opts
func (_m *MockGameServiceClient) Join(ctx context.Context, opts ...grpc.CallOption) (GameService_JoinClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 GameService_JoinClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (GameService_JoinClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) GameService_JoinClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GameService_JoinClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGameServiceClient_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockGameServiceClient_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockGameServiceClient_Expecter) Join(ctx interface{}, opts ...interface{}) *MockGameServiceClient_Join_Call {
	return &MockGameServiceClient_Join_Call{Call: _e.mock.On("Join",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockGameServiceClient_Join_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockGameServiceClient_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockGameServiceClient_Join_Call) Return(_a0 GameService_JoinClient, _a1 error) *MockGameServiceClient_Join_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGameServiceClient_Join_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (GameService_JoinClient, error)) *MockGameServiceClient_Join_Call {
	_c.Call.Return(run)
	return _c
}

// ListRooms provides a mock function with given fields: ctx, in, opts
func (_m *MockGameServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ListRoomsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListRoomsRequest, ...grpc.CallOption) (*ListRoomsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListRoomsRequest, ...grpc.CallOption) *ListRoomsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListRoomsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListRoomsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGameServiceClient_ListRooms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRooms'
type MockGameServiceClient_ListRooms_Call struct {
	*mock.Call
}

// ListRooms is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ListRoomsRequest
//   - opts ...grpc.CallOption
func (_e *MockGameServiceClient_Expecter) ListRooms(ctx interface{}, in interface{}, opts ...interface{}) *MockGameServiceClient_ListRooms_Call {
	return &MockGameServiceClient_ListRooms_Call{Call: _e.mock.On("ListRooms",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockGameServiceClient_ListRooms_Call) Run(run func(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption)) *MockGameServiceClient_ListRooms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ListRoomsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockGameServiceClient_ListRooms_Call) Return(_a0 *ListRoomsResponse, _a1 error) *MockGameServiceClient_ListRooms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGameServiceClient_ListRooms_Call) RunAndReturn(run func(context.Context, *ListRoomsRequest, ...grpc.CallOption) (*ListRoomsResponse, error)) *MockGameServiceClient_ListRooms_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGameServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGameServiceClient creates a new instance of MockGameServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGameServiceClient(t mockConstructorTestingTNewMockGameServiceClient) *MockGameServiceClient {
	mock := &MockGameServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
