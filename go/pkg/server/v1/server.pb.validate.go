// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/v1/server.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IsPublic

	// no validation rules for Language

	if m.Password != nil {
		// no validation rules for Password
	}

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on ListRoomsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoomsResponseMultiError, or nil if none found.
func (m *ListRoomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoomsResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoomsResponseMultiError(errors)
	}

	return nil
}

// ListRoomsResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoomsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoomsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoomsResponseMultiError) AllErrors() []error { return m }

// ListRoomsResponseValidationError is the validation error returned by
// ListRoomsResponse.Validate if the designated constraints aren't met.
type ListRoomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomsResponseValidationError) ErrorName() string {
	return "ListRoomsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomsResponseValidationError{}

// Validate checks the field values on UserSimpleLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSimpleLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSimpleLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSimpleLoginRequestMultiError, or nil if none found.
func (m *UserSimpleLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSimpleLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Email != nil {
		// no validation rules for Email
	}

	if len(errors) > 0 {
		return UserSimpleLoginRequestMultiError(errors)
	}

	return nil
}

// UserSimpleLoginRequestMultiError is an error wrapping multiple validation
// errors returned by UserSimpleLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type UserSimpleLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSimpleLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSimpleLoginRequestMultiError) AllErrors() []error { return m }

// UserSimpleLoginRequestValidationError is the validation error returned by
// UserSimpleLoginRequest.Validate if the designated constraints aren't met.
type UserSimpleLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSimpleLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSimpleLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSimpleLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSimpleLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSimpleLoginRequestValidationError) ErrorName() string {
	return "UserSimpleLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserSimpleLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSimpleLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSimpleLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSimpleLoginRequestValidationError{}

// Validate checks the field values on UserSimpleLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSimpleLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSimpleLoginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSimpleLoginResponseMultiError, or nil if none found.
func (m *UserSimpleLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSimpleLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserSimpleLoginResponseValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserSimpleLoginResponseValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSimpleLoginResponseValidationError{
				field:  "Player",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserSimpleLoginResponseMultiError(errors)
	}

	return nil
}

// UserSimpleLoginResponseMultiError is an error wrapping multiple validation
// errors returned by UserSimpleLoginResponse.ValidateAll() if the designated
// constraints aren't met.
type UserSimpleLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSimpleLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSimpleLoginResponseMultiError) AllErrors() []error { return m }

// UserSimpleLoginResponseValidationError is the validation error returned by
// UserSimpleLoginResponse.Validate if the designated constraints aren't met.
type UserSimpleLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSimpleLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSimpleLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSimpleLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSimpleLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSimpleLoginResponseValidationError) ErrorName() string {
	return "UserSimpleLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserSimpleLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSimpleLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSimpleLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSimpleLoginResponseValidationError{}

// Validate checks the field values on JoinRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinRoomRequestMultiError, or nil if none found.
func (m *JoinRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for PlayerId

	if len(errors) > 0 {
		return JoinRoomRequestMultiError(errors)
	}

	return nil
}

// JoinRoomRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRoomRequestMultiError) AllErrors() []error { return m }

// JoinRoomRequestValidationError is the validation error returned by
// JoinRoomRequest.Validate if the designated constraints aren't met.
type JoinRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomRequestValidationError) ErrorName() string { return "JoinRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomRequestValidationError{}

// Validate checks the field values on PlayerJoinedMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerJoinedMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerJoinedMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerJoinedMessageMultiError, or nil if none found.
func (m *PlayerJoinedMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerJoinedMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayerJoinedMessageValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayerJoinedMessageValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerJoinedMessageValidationError{
				field:  "Player",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlayerJoinedMessageMultiError(errors)
	}

	return nil
}

// PlayerJoinedMessageMultiError is an error wrapping multiple validation
// errors returned by PlayerJoinedMessage.ValidateAll() if the designated
// constraints aren't met.
type PlayerJoinedMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerJoinedMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerJoinedMessageMultiError) AllErrors() []error { return m }

// PlayerJoinedMessageValidationError is the validation error returned by
// PlayerJoinedMessage.Validate if the designated constraints aren't met.
type PlayerJoinedMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerJoinedMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerJoinedMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerJoinedMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerJoinedMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerJoinedMessageValidationError) ErrorName() string {
	return "PlayerJoinedMessageValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerJoinedMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerJoinedMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerJoinedMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerJoinedMessageValidationError{}

// Validate checks the field values on PlayerLeftMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlayerLeftMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerLeftMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerLeftMessageMultiError, or nil if none found.
func (m *PlayerLeftMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerLeftMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	if len(errors) > 0 {
		return PlayerLeftMessageMultiError(errors)
	}

	return nil
}

// PlayerLeftMessageMultiError is an error wrapping multiple validation errors
// returned by PlayerLeftMessage.ValidateAll() if the designated constraints
// aren't met.
type PlayerLeftMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerLeftMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerLeftMessageMultiError) AllErrors() []error { return m }

// PlayerLeftMessageValidationError is the validation error returned by
// PlayerLeftMessage.Validate if the designated constraints aren't met.
type PlayerLeftMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerLeftMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerLeftMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerLeftMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerLeftMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerLeftMessageValidationError) ErrorName() string {
	return "PlayerLeftMessageValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerLeftMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerLeftMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerLeftMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerLeftMessageValidationError{}

// Validate checks the field values on WordsMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordsMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordsMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordsMessageMultiError, or
// nil if none found.
func (m *WordsMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *WordsMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WordsMessageMultiError(errors)
	}

	return nil
}

// WordsMessageMultiError is an error wrapping multiple validation errors
// returned by WordsMessage.ValidateAll() if the designated constraints aren't met.
type WordsMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordsMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordsMessageMultiError) AllErrors() []error { return m }

// WordsMessageValidationError is the validation error returned by
// WordsMessage.Validate if the designated constraints aren't met.
type WordsMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordsMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordsMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordsMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordsMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordsMessageValidationError) ErrorName() string { return "WordsMessageValidationError" }

// Error satisfies the builtin error interface
func (e WordsMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordsMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordsMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordsMessageValidationError{}

// Validate checks the field values on FatalMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FatalMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FatalMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FatalMessageMultiError, or
// nil if none found.
func (m *FatalMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *FatalMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return FatalMessageMultiError(errors)
	}

	return nil
}

// FatalMessageMultiError is an error wrapping multiple validation errors
// returned by FatalMessage.ValidateAll() if the designated constraints aren't met.
type FatalMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FatalMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FatalMessageMultiError) AllErrors() []error { return m }

// FatalMessageValidationError is the validation error returned by
// FatalMessage.Validate if the designated constraints aren't met.
type FatalMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FatalMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FatalMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FatalMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FatalMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FatalMessageValidationError) ErrorName() string { return "FatalMessageValidationError" }

// Error satisfies the builtin error interface
func (e FatalMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFatalMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FatalMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FatalMessageValidationError{}

// Validate checks the field values on InitRoomMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InitRoomMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitRoomMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitRoomMessageMultiError, or nil if none found.
func (m *InitRoomMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *InitRoomMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitRoomMessageValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitRoomMessageValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitRoomMessageValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitRoomMessageMultiError(errors)
	}

	return nil
}

// InitRoomMessageMultiError is an error wrapping multiple validation errors
// returned by InitRoomMessage.ValidateAll() if the designated constraints
// aren't met.
type InitRoomMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitRoomMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitRoomMessageMultiError) AllErrors() []error { return m }

// InitRoomMessageValidationError is the validation error returned by
// InitRoomMessage.Validate if the designated constraints aren't met.
type InitRoomMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitRoomMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitRoomMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitRoomMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitRoomMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitRoomMessageValidationError) ErrorName() string { return "InitRoomMessageValidationError" }

// Error satisfies the builtin error interface
func (e InitRoomMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitRoomMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitRoomMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitRoomMessageValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Message.(type) {

	case *Message_Joined:

		if all {
			switch v := interface{}(m.GetJoined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Joined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Joined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJoined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "Joined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_Left:

		if all {
			switch v := interface{}(m.GetLeft()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Left",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Left",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLeft()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "Left",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_Words:

		if all {
			switch v := interface{}(m.GetWords()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Words",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Words",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWords()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "Words",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_Fatal:

		if all {
			switch v := interface{}(m.GetFatal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Fatal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Fatal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFatal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "Fatal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Message_InitRoom:

		if all {
			switch v := interface{}(m.GetInitRoom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "InitRoom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "InitRoom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInitRoom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "InitRoom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}
