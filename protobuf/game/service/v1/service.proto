syntax = "proto3";

package game.service.v1;

option go_package = "github.com/knightpp/alias-proto/go/game/service/v1;gamesvc";

service GameService {
  rpc ListRooms(ListRoomsRequest) returns (ListRoomsResponse);
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse);
  rpc UpdateRoom(UpdateRoomRequest) returns (UpdateRoomResponse);
  rpc JoinRoom(JoinRoomRequest) returns (stream JoinRoomResponse);

  rpc TransferLeadership(TransferLeadershipRequest) returns (TransferLeadershipResponse);

  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse);
  rpc UpdateTeam(UpdateTeamRequest) returns (UpdateTeamResponse);
  rpc JoinTeam(JoinTeamRequest) returns (JoinTeamResponse);
  rpc StartGame(StartGameRequest) returns (StartGameResponse);
  rpc StopGame(StopGameRequest) returns (StopGameResponse);

  rpc StartTurn(StartTurnRequest) returns (StartTurnResponse);
  rpc StopTurn(StopTurnRequest) returns (StopTurnResponse);

  rpc Score(ScoreRequest) returns (ScoreResponse);
}

message Room {
  string id = 1;
  string name = 2;
  string leader_id = 3;
  bool is_public = 4;
  string langugage = 5;
  repeated Player lobby = 6;
  repeated Team teams = 7;
}

message Player {
  string id = 1;
  string name = 2;
  string gravatar_url = 3;
}

message Team {
  string id = 1;
  string name = 2;
  Player player_a = 3;
  Player player_b = 4;
}

message ListRoomsRequest {}
message ListRoomsResponse {
  repeated Room rooms = 1;
}

message CreateRoomRequest {
  string name = 1;
  bool is_public = 2;
  string langugage = 3;
  optional string password = 4;
}
message CreateRoomResponse {
  string id = 1;
}

message UpdateRoomRequest {
  Room room = 1;
  optional string password = 2;
}
message UpdateRoomResponse {}

message CreateTeamRequest {
  string name = 1;
}
message CreateTeamResponse {}

message UpdateTeamRequest {
  Team team = 1;
}
message UpdateTeamResponse {}

message JoinTeamRequest {
  string team_id = 1;
}
message JoinTeamResponse {}

message StartGameRequest {
  string next_player_turn = 1;
}
message StartGameResponse {}

message StopGameRequest {}
message StopGameResponse {}

message TransferLeadershipRequest {
  string player_id = 1;
}
message TransferLeadershipResponse {}

message StartTurnRequest {
  uint64 duration_ms = 1;
  string next_player_turn = 2;
}
message StartTurnResponse {}
message StopTurnRequest {}
message StopTurnResponse {}

message Statistics {
  uint32 rights = 1;
  uint32 wrongs = 2;
}

message JoinRoomRequest {
  string room_id = 1;
  optional string password = 2;
}
message JoinRoomResponse {
  Announcement announcement = 1;
}

enum Slot {
  SLOT_UNSPECIFIED = 0;
  SLOT_A = 1;
  SLOT_B = 2;
}

message AnnNewTeam {
  Team team = 1;
}

message AnnEndGame {
  map<string, Statistics> team_id_to_stats = 1;
}

message AnnEndTurn {
  Statistics stats = 1;
}

message AnnWord {
  string word = 1;
}

message AnnTransferLeadership {
  string new_leader = 1;
}

message AnnJoinTeam {
  string player_id = 1;
  string team_id = 2;
  Slot slot = 3;
}

message AnnStartGame {
  string player_turn = 1;
}

message AnnStartTurn {
  uint64 duration_ms = 1;
}

message AnnUpdateRoomInfo {
  string name = 1;
  string leader_id = 2;
  bool is_public = 3;
  string langugage = 4;
}

message AnnAddPlayer {
  Player player = 1;
}

message AnnRemovePlayer {
  string player_id = 1;
}

message Announcement {
  oneof announce {
    AnnNewTeam new_team = 1;
    AnnJoinTeam join_team = 2;

    AnnStartTurn start_turn = 3;
    AnnEndTurn end_turn = 4;

    AnnStartGame start_game = 5;
    AnnEndGame end_game = 6;

    AnnWord word = 7;

    AnnTransferLeadership transfer_leadership = 8;

    AnnUpdateRoomInfo update_room = 9;

    AnnAddPlayer add_player = 10;
    AnnRemovePlayer remove_player = 11;
  }
}

message ScoreRequest {
  int32 change = 1;
}
message ScoreResponse {}
